#include <iostream>
#include <vector>

const int inf = 1e9;

int main() {
    // n – количество вершин
    int n;
    std::cin >> n;
    std::vector<std::vector<int>> A(n, std::vector<int>(n, 0)); // матрица смежности с результирующими значениями

    // заполнение матрицы смежности:
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            int x;
            std::cin >> x;
            if (i == j) { // если мы на диагонали — расстояние от вершины до самой себя всегда 0
                continue;
            } else if (x == 0) { // иначе заполняем inf...
                A[i][j] = inf;
            } else {
                A[i][j] = x; // ...если только нам по условию не дано ребро (исходное расстояние, которое мы пытаемся уменьшить)
            }
        }
    }
    // решаем без явного использования вспомогательных матриц:
    for (int k = 0; k < n; ++k) {
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                // здесь можно добавить проверку на диагональ:
                // if (i == j) continue; (от самой себя до самой себя мы никак не улучшим)
                A[i][j] = std::min(A[i][k] + A[k][j], A[i][j]); // проверяем, сможем ли мы обходом через k–ю вершину улучшить путь из i до j
            }
        }
    }

    // выводим матрицу результатов:
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            std::cout << A[i][j] << " ";
        }
        std::cout << std::endl;
    }
    return 0;
}

/*
Test Input:
5
0 42 18468 6335 26501
19170 0 15725 11479 29359
26963 24465 0 5706 28146
23282 16828 9962 0 492
2996 11943 4828 5437 0

Test Output:
0 42 11655 6335 6827
14967 0 15725 11479 11971
9194 9236 0 5706 6198
3488 3530 5320 0 492
2996 3038 4828 5437 0
*/
